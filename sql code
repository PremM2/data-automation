


CREATE PROCEDURE DATA_AUTOMATION3
AS 
BEGIN 
    SET NOCOUNT ON;

    DECLARE @FAILED_COUNT1 INT,
	@FAILED_COUNT2 INT,
	@FAILED_COUNT3 INT,
	@FAILED_COUNT4 INT;

    WITH CTE_DUPLICATE AS (
        SELECT COUSTOMER_KEY, NAME, COUNT(*) AS DUPLICATE_CUSTOMERS
        FROM CUSTOMER_DIM 
        GROUP BY COUSTOMER_KEY, NAME
        HAVING COUNT(*) > 1
    )
    SELECT @FAILED_COUNT1 = COUNT(*) FROM CTE_DUPLICATE;

    INSERT INTO DATA_AUTOMATION (CHECK_NAME, CHECK_DESCRIPTION, FAILED_COUNT)
    VALUES ('Duplicate customers', 'Identifies multiple identical records in CUSTOMER_DIM', @FAILED_COUNT1);

    WITH CTE AS (
        SELECT C.COUSTOMER_KEY, SUM(F.UNIT_PRICE * F.QUANTITY) AS TOTAL_PRICE
        FROM CUSTOMER_DIM C 
        JOIN FACT_TABLE F ON C.COUSTOMER_KEY = F.COUSTOMER_KEY 
        GROUP BY C.COUSTOMER_KEY
    ),
    CTE1 AS (
        SELECT AVG(TOTAL_PRICE) AS AVG_TOTAL_PRICE FROM CTE
    )
    SELECT @FAILED_COUNT2 = SUM(CASE WHEN CTE.TOTAL_PRICE > CTE1.AVG_TOTAL_PRICE THEN 1 ELSE 0 END) 
    FROM CTE JOIN CTE1 ON 1=1;

    INSERT INTO DATA_AUTOMATION (CHECK_NAME, CHECK_DESCRIPTION, FAILED_COUNT)
    VALUES ('More than average', 'Customers with total spending above the average', @FAILED_COUNT2);

    SELECT @FAILED_COUNT3 = SUM(F.TOTAL_PRICE)
    FROM FACT_TABLE F 
    JOIN TIME_DIM T ON T.TIME_KEY = F.TIME_KEY 
    WHERE (T.DATE >= DATEADD(DAY, -15, DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()) - 1, 0)) 
           AND T.DATE < DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), 0))
       OR (T.DATE >= DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), 0)
           AND T.DATE < DATEADD(DAY, 15, DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), 0)));

    INSERT INTO DATA_AUTOMATION (CHECK_NAME, CHECK_DESCRIPTION, FAILED_COUNT)
    VALUES ('Mid range sales', 'Total sales for last 15 days of previous month & first 15 days of current month', @FAILED_COUNT3);

    WITH CTE_BANKS AS (
        SELECT TR.BANK_NAME, SUM(F.TOTAL_PRICE) AS TOTAL_PRICE 
        FROM TRANS_DIM TR 
        JOIN FACT_TABLE F ON F.PAYMENT_KEY = TR.PAYMENT_KEY 
        GROUP BY TR.BANK_NAME
    ),
    CTE_CATEGORY AS (
        SELECT BANK_NAME, 
               CASE WHEN TOTAL_PRICE > (SELECT AVG(TOTAL_PRICE) FROM CTE_BANKS) THEN 'More earning banks' ELSE 'Less' END AS CATEGORY
        FROM CTE_BANKS
    )
    SELECT @FAILED_COUNT4 = COUNT(*) FROM CTE_CATEGORY WHERE CATEGORY = 'More earning banks';

    INSERT INTO DATA_AUTOMATION (CHECK_NAME, CHECK_DESCRIPTION, FAILED_COUNT)
    VALUES ('More earning banks', 'Number of banks earning above average', @FAILED_COUNT4);

END;
GO
EXEC DATA_AUTOMATION3
